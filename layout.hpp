// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://roboticsbrno.github.io/Esp32-RBGridUI-Designer/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":36284,"type":"Slider","state":{"id":"MotorSpeed","x":0.5,"y":8,"w":3,"h":10,"css":{},"color":"#008000","fontSize":30,"min":1,"max":10,"value":2,"precision":0.01,"showValue":true}},{"uuid":13125,"type":"Slider","state":{"id":"IRun","x":0.5,"y":5.5,"w":11,"h":1,"css":{},"color":"#0300ff","fontSize":16,"min":8,"max":16,"value":8,"precision":1,"showValue":true}},{"uuid":44545,"type":"Slider","state":{"id":"StopSensitivity","x":8.5,"y":8,"w":3,"h":10,"css":{},"color":"#ff0000","fontSize":30,"min":50,"max":255,"value":100,"precision":1,"showValue":true}},{"uuid":51944,"type":"Text","state":{"id":"MotorSpeedLabel","x":0,"y":7,"w":4,"h":1,"css":{},"text":"Motor Speed","fontSize":12,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":64264,"type":"Text","state":{"id":"IRunLabel","x":4.5,"y":4.5,"w":3,"h":1,"css":{},"text":"I Run /32","fontSize":12,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":60581,"type":"Text","state":{"id":"StopSensLabel","x":8,"y":7,"w":4,"h":1,"css":{},"text":"Stop Sens","fontSize":12,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":14864,"type":"Text","state":{"id":"LoadReserveLabel","x":4,"y":7,"w":4,"h":1,"css":{},"text":"Load Reserve","fontSize":12,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":9609,"type":"Button","state":{"id":"StartStopButton","x":1,"y":0.5,"w":6,"h":3.5,"css":{},"text":"Start"}},{"uuid":42117,"type":"Bar","state":{"id":"MotorLoad","x":4.5,"y":8,"w":3,"h":10,"css":{},"color":"#008000","fontSize":30,"min":50,"max":255,"value":100,"showValue":true}},{"uuid":9981,"type":"Text","state":{"id":"PotValueLabel","x":7,"y":0.5,"w":4.5,"h":1.5,"css":{},"text":"Potenciometr","fontSize":12,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":38946,"type":"Text","state":{"id":"PotValue","x":7,"y":2,"w":4.5,"h":1.5,"css":{},"text":"0","fontSize":30,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        MotorSpeed(
            UI.slider(0.5, 8, 3, 10, 36284)
                .fontSize(30)
                .min(-5)
                .max(5)
                .value(2)
                .precision(0.01)
        ),
        IRun(
            UI.slider(0.5, 5.5, 11, 1, 13125)
                .color("#0300ff")
                .min(8)
                .max(16)
                .value(8)
        ),
        StopSensitivity(
            UI.slider(8.5, 8, 3, 10, 44545)
                .color("#ff0000")
                .fontSize(30)
                .min(50)
                .max(255)
                .value(100)
        ),
        MotorSpeedLabel(
            UI.text(0, 7, 4, 1, 51944)
                .text("Motor Speed")
        ),
        IRunLabel(
            UI.text(4.5, 4.5, 3, 1, 64264)
                .text("I Run /32")
        ),
        StopSensLabel(
            UI.text(8, 7, 4, 1, 60581)
                .text("Stop Sens")
        ),
        LoadReserveLabel(
            UI.text(4, 7, 4, 1, 14864)
                .text("Load Reserve")
        ),
        StartStopButton(
            UI.button(1, 0.5, 6, 3.5, 9609)
                .text("Start")
        ),
        MotorLoad(
            UI.bar(4.5, 8, 3, 10, 42117)
                .fontSize(30)
                .min(50)
                .max(255)
                .value(100)
                .showValue(true)
        ),
        PotValueLabel(
            UI.text(7, 0.5, 4.5, 1.5, 9981)
                .text("Potenciometr")
        ),
        PotValue(
            UI.text(7, 2, 4.5, 1.5, 38946)
                .text("0")
                .fontSize(30)
        )
    {
    }

public:
    void commit();

    Slider& MotorSpeed;
    Slider& IRun;
    Slider& StopSensitivity;
    Text& MotorSpeedLabel;
    Text& IRunLabel;
    Text& StopSensLabel;
    Text& LoadReserveLabel;
    Button& StartStopButton;
    Bar& MotorLoad;
    Text& PotValueLabel;
    Text& PotValue;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    Slider MotorSpeed;
    Slider IRun;
    Slider StopSensitivity;
    Text MotorSpeedLabel;
    Text IRunLabel;
    Text StopSensLabel;
    Text LoadReserveLabel;
    Button StartStopButton;
    Bar MotorLoad;
    Text PotValueLabel;
    Text PotValue;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.MotorSpeed = MotorSpeed.finish();
    Layout.IRun = IRun.finish();
    Layout.StopSensitivity = StopSensitivity.finish();
    Layout.MotorSpeedLabel = MotorSpeedLabel.finish();
    Layout.IRunLabel = IRunLabel.finish();
    Layout.StopSensLabel = StopSensLabel.finish();
    Layout.LoadReserveLabel = LoadReserveLabel.finish();
    Layout.StartStopButton = StartStopButton.finish();
    Layout.MotorLoad = MotorLoad.finish();
    Layout.PotValueLabel = PotValueLabel.finish();
    Layout.PotValue = PotValue.finish();
    UI.commit();
}

};

};